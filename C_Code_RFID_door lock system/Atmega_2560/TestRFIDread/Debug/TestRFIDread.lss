
TestRFIDread.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800200  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002c8  008002c8  00000c20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002498  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e48  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db2  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00004dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000798  00000000  00000000  000050ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016f6  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006f7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	06 c5       	rjmp	.+2572   	; 0xa72 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ec       	ldi	r30, 0xC4	; 196
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3c       	cpi	r26, 0xC8	; 200
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 ec       	ldi	r26, 0xC8	; 200
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3c       	cpi	r26, 0xCA	; 202
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b6 d2       	rcall	.+1388   	; 0x68c <main>
 120:	cf c4       	rjmp	.+2462   	; 0xac0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCDBusyLoop>:
	LCDBusyLoop();
	
	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
	LCDByte(byte,1);
	LCDBusyLoop();
}
 124:	81 b1       	in	r24, 0x01	; 1
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	81 b9       	out	0x01, r24	; 1
 12a:	82 b1       	in	r24, 0x02	; 2
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	82 b9       	out	0x02, r24	; 2
 130:	82 b1       	in	r24, 0x02	; 2
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	82 b9       	out	0x02, r24	; 2
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCDBusyLoop+0x14>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCDBusyLoop+0x1a>
 13e:	82 b1       	in	r24, 0x02	; 2
 140:	80 61       	ori	r24, 0x10	; 16
 142:	82 b9       	out	0x02, r24	; 2
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
 14c:	80 b1       	in	r24, 0x00	; 0
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x30>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCDBusyLoop+0x36>
 15a:	92 b1       	in	r25, 0x02	; 2
 15c:	9f 7e       	andi	r25, 0xEF	; 239
 15e:	92 b9       	out	0x02, r25	; 2
 160:	95 e0       	ldi	r25, 0x05	; 5
 162:	9a 95       	dec	r25
 164:	f1 f7       	brne	.-4      	; 0x162 <LCDBusyLoop+0x3e>
 166:	00 00       	nop
 168:	92 b1       	in	r25, 0x02	; 2
 16a:	90 61       	ori	r25, 0x10	; 16
 16c:	92 b9       	out	0x02, r25	; 2
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x4c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDBusyLoop+0x52>
 176:	90 b1       	in	r25, 0x00	; 0
 178:	80 78       	andi	r24, 0x80	; 128
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	9a 95       	dec	r25
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCDBusyLoop+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCDBusyLoop+0x5e>
 182:	92 b1       	in	r25, 0x02	; 2
 184:	9f 7e       	andi	r25, 0xEF	; 239
 186:	92 b9       	out	0x02, r25	; 2
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCDBusyLoop+0x66>
 18e:	00 00       	nop
 190:	81 11       	cpse	r24, r1
 192:	d5 cf       	rjmp	.-86     	; 0x13e <LCDBusyLoop+0x1a>
 194:	82 b1       	in	r24, 0x02	; 2
 196:	8f 7b       	andi	r24, 0xBF	; 191
 198:	82 b9       	out	0x02, r24	; 2
 19a:	81 b1       	in	r24, 0x01	; 1
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	81 b9       	out	0x01, r24	; 1
 1a0:	08 95       	ret

000001a2 <LCDByte>:
 1a2:	28 2f       	mov	r18, r24
 1a4:	22 95       	swap	r18
 1a6:	2f 70       	andi	r18, 0x0F	; 15
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	61 11       	cpse	r22, r1
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <LCDByte+0x14>
 1ae:	92 b1       	in	r25, 0x02	; 2
 1b0:	9f 7d       	andi	r25, 0xDF	; 223
 1b2:	92 b9       	out	0x02, r25	; 2
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCDByte+0x1a>
 1b6:	92 b1       	in	r25, 0x02	; 2
 1b8:	90 62       	ori	r25, 0x20	; 32
 1ba:	92 b9       	out	0x02, r25	; 2
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDByte+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCDByte+0x22>
 1c4:	92 b1       	in	r25, 0x02	; 2
 1c6:	90 61       	ori	r25, 0x10	; 16
 1c8:	92 b9       	out	0x02, r25	; 2
 1ca:	92 b1       	in	r25, 0x02	; 2
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	92 2b       	or	r25, r18
 1d0:	92 b9       	out	0x02, r25	; 2
 1d2:	95 e0       	ldi	r25, 0x05	; 5
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDByte+0x32>
 1d8:	00 00       	nop
 1da:	92 b1       	in	r25, 0x02	; 2
 1dc:	9f 7e       	andi	r25, 0xEF	; 239
 1de:	92 b9       	out	0x02, r25	; 2
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>
 1e6:	00 00       	nop
 1e8:	92 b1       	in	r25, 0x02	; 2
 1ea:	90 61       	ori	r25, 0x10	; 16
 1ec:	92 b9       	out	0x02, r25	; 2
 1ee:	92 b1       	in	r25, 0x02	; 2
 1f0:	90 7f       	andi	r25, 0xF0	; 240
 1f2:	89 2b       	or	r24, r25
 1f4:	82 b9       	out	0x02, r24	; 2
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCDByte+0x56>
 1fc:	00 00       	nop
 1fe:	82 b1       	in	r24, 0x02	; 2
 200:	8f 7e       	andi	r24, 0xEF	; 239
 202:	82 b9       	out	0x02, r24	; 2
 204:	95 e0       	ldi	r25, 0x05	; 5
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDByte+0x64>
 20a:	00 00       	nop
 20c:	8b cf       	rjmp	.-234    	; 0x124 <LCDBusyLoop>
 20e:	08 95       	ret

00000210 <LCDWriteString>:
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	18 c0       	rjmp	.+48     	; 0x24c <LCDWriteString+0x3c>
 21c:	85 32       	cpi	r24, 0x25	; 37
 21e:	99 f4       	brne	.+38     	; 0x246 <LCDWriteString+0x36>
 220:	8e 01       	movw	r16, r28
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	80 53       	subi	r24, 0x30	; 48
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	20 f4       	brcc	.+8      	; 0x236 <LCDWriteString+0x26>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	b8 df       	rcall	.-144    	; 0x1a2 <LCDByte>
 232:	e8 01       	movw	r28, r16
 234:	0a c0       	rjmp	.+20     	; 0x24a <LCDWriteString+0x3a>
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	b3 df       	rcall	.-154    	; 0x1a2 <LCDByte>
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	b0 df       	rcall	.-160    	; 0x1a2 <LCDByte>
 242:	e8 01       	movw	r28, r16
 244:	02 c0       	rjmp	.+4      	; 0x24a <LCDWriteString+0x3a>
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	ac df       	rcall	.-168    	; 0x1a2 <LCDByte>
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	88 81       	ld	r24, Y
 24e:	81 11       	cpse	r24, r1
 250:	e5 cf       	rjmp	.-54     	; 0x21c <LCDWriteString+0xc>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <LCDGotoXY>:
 25c:	84 31       	cpi	r24, 0x14	; 20
 25e:	70 f4       	brcc	.+28     	; 0x27c <LCDGotoXY+0x20>
 260:	62 30       	cpi	r22, 0x02	; 2
 262:	31 f0       	breq	.+12     	; 0x270 <LCDGotoXY+0x14>
 264:	63 30       	cpi	r22, 0x03	; 3
 266:	31 f0       	breq	.+12     	; 0x274 <LCDGotoXY+0x18>
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	29 f4       	brne	.+10     	; 0x276 <LCDGotoXY+0x1a>
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	03 c0       	rjmp	.+6      	; 0x276 <LCDGotoXY+0x1a>
 270:	8c 5e       	subi	r24, 0xEC	; 236
 272:	01 c0       	rjmp	.+2      	; 0x276 <LCDGotoXY+0x1a>
 274:	8c 5a       	subi	r24, 0xAC	; 172
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	93 cf       	rjmp	.-218    	; 0x1a2 <LCDByte>
 27c:	08 95       	ret

0000027e <LCDInit>:
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	86 e7       	ldi	r24, 0x76	; 118
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <LCDInit+0xa>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCDInit+0x14>
 292:	00 00       	nop
 294:	81 b1       	in	r24, 0x01	; 1
 296:	8f 60       	ori	r24, 0x0F	; 15
 298:	81 b9       	out	0x01, r24	; 1
 29a:	81 b1       	in	r24, 0x01	; 1
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	81 b9       	out	0x01, r24	; 1
 2a0:	81 b1       	in	r24, 0x01	; 1
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	81 b9       	out	0x01, r24	; 1
 2a6:	81 b1       	in	r24, 0x01	; 1
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	81 b9       	out	0x01, r24	; 1
 2ac:	82 b1       	in	r24, 0x02	; 2
 2ae:	80 7f       	andi	r24, 0xF0	; 240
 2b0:	82 b9       	out	0x02, r24	; 2
 2b2:	82 b1       	in	r24, 0x02	; 2
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	82 b9       	out	0x02, r24	; 2
 2b8:	82 b1       	in	r24, 0x02	; 2
 2ba:	8f 7b       	andi	r24, 0xBF	; 191
 2bc:	82 b9       	out	0x02, r24	; 2
 2be:	82 b1       	in	r24, 0x02	; 2
 2c0:	8f 7d       	andi	r24, 0xDF	; 223
 2c2:	82 b9       	out	0x02, r24	; 2
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCDInit+0x48>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCDInit+0x4a>
 2c8:	00 00       	nop
 2ca:	82 b1       	in	r24, 0x02	; 2
 2cc:	80 61       	ori	r24, 0x10	; 16
 2ce:	82 b9       	out	0x02, r24	; 2
 2d0:	82 b1       	in	r24, 0x02	; 2
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	82 b9       	out	0x02, r24	; 2
 2d6:	25 e0       	ldi	r18, 0x05	; 5
 2d8:	2a 95       	dec	r18
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCDInit+0x5a>
 2dc:	00 00       	nop
 2de:	82 b1       	in	r24, 0x02	; 2
 2e0:	8f 7e       	andi	r24, 0xEF	; 239
 2e2:	82 b9       	out	0x02, r24	; 2
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCDInit+0x68>
 2ea:	00 00       	nop
 2ec:	1b df       	rcall	.-458    	; 0x124 <LCDBusyLoop>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8c 2f       	mov	r24, r28
 2f2:	8c 60       	ori	r24, 0x0C	; 12
 2f4:	56 df       	rcall	.-340    	; 0x1a2 <LCDByte>
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	88 e2       	ldi	r24, 0x28	; 40
 2fa:	53 df       	rcall	.-346    	; 0x1a2 <LCDByte>
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	ad df       	rcall	.-166    	; 0x25c <LCDGotoXY>
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 306:	87 e0       	ldi	r24, 0x07	; 7
 308:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 30a:	81 e5       	ldi	r24, 0x51	; 81
 30c:	8c bd       	out	0x2c, r24	; 44
 30e:	08 95       	ret

00000310 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 310:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 312:	0d b4       	in	r0, 0x2d	; 45
 314:	07 fe       	sbrs	r0, 7
 316:	fd cf       	rjmp	.-6      	; 0x312 <spi_transmit+0x2>
	
	return SPDR;
 318:	8e b5       	in	r24, 0x2e	; 46
}
 31a:	08 95       	ret

0000031c <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 31c:	cf 93       	push	r28
 31e:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 320:	95 b1       	in	r25, 0x05	; 5
 322:	9e 7f       	andi	r25, 0xFE	; 254
 324:	95 b9       	out	0x05, r25	; 5
	spi_transmit((reg<<1)&0x7E);
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	8e 77       	andi	r24, 0x7E	; 126
 32e:	f0 df       	rcall	.-32     	; 0x310 <spi_transmit>
	spi_transmit(data);
 330:	8c 2f       	mov	r24, r28
 332:	ee df       	rcall	.-36     	; 0x310 <spi_transmit>
	DISABLE_CHIP();
 334:	85 b1       	in	r24, 0x05	; 5
 336:	81 60       	ori	r24, 0x01	; 1
 338:	85 b9       	out	0x05, r24	; 5
}
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 33e:	95 b1       	in	r25, 0x05	; 5
 340:	9e 7f       	andi	r25, 0xFE	; 254
 342:	95 b9       	out	0x05, r25	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	8e 77       	andi	r24, 0x7E	; 126
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	e0 df       	rcall	.-64     	; 0x310 <spi_transmit>
	data = spi_transmit(0x00);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	de df       	rcall	.-68     	; 0x310 <spi_transmit>
	DISABLE_CHIP();
 354:	95 b1       	in	r25, 0x05	; 5
 356:	91 60       	ori	r25, 0x01	; 1
 358:	95 b9       	out	0x05, r25	; 5
	return data;
}
 35a:	08 95       	ret

0000035c <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 35c:	6f e0       	ldi	r22, 0x0F	; 15
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	dd cf       	rjmp	.-70     	; 0x31c <mfrc522_write>
 362:	08 95       	ret

00000364 <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 364:	fb df       	rcall	.-10     	; 0x35c <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 366:	6d e8       	ldi	r22, 0x8D	; 141
 368:	8a e2       	ldi	r24, 0x2A	; 42
 36a:	d8 df       	rcall	.-80     	; 0x31c <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 36c:	6e e3       	ldi	r22, 0x3E	; 62
 36e:	8b e2       	ldi	r24, 0x2B	; 43
 370:	d5 df       	rcall	.-86     	; 0x31c <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 372:	6e e1       	ldi	r22, 0x1E	; 30
 374:	8c e2       	ldi	r24, 0x2C	; 44
 376:	d2 df       	rcall	.-92     	; 0x31c <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8d e2       	ldi	r24, 0x2D	; 45
 37c:	cf df       	rcall	.-98     	; 0x31c <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 37e:	60 e4       	ldi	r22, 0x40	; 64
 380:	85 e1       	ldi	r24, 0x15	; 21
	mfrc522_write(ModeReg, 0x3D);
 382:	cc df       	rcall	.-104    	; 0x31c <mfrc522_write>
 384:	6d e3       	ldi	r22, 0x3D	; 61
 386:	81 e1       	ldi	r24, 0x11	; 17
 388:	c9 df       	rcall	.-110    	; 0x31c <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 38a:	84 e1       	ldi	r24, 0x14	; 20
 38c:	d8 df       	rcall	.-80     	; 0x33e <mfrc522_read>
	if(!(byte&0x03))
 38e:	98 2f       	mov	r25, r24
 390:	93 70       	andi	r25, 0x03	; 3
 392:	21 f4       	brne	.+8      	; 0x39c <mfrc522_init+0x38>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 394:	68 2f       	mov	r22, r24
 396:	63 60       	ori	r22, 0x03	; 3
 398:	84 e1       	ldi	r24, 0x14	; 20
 39a:	c0 cf       	rjmp	.-128    	; 0x31c <mfrc522_write>
 39c:	08 95       	ret

0000039e <mfrc522_to_card>:
 39e:	4f 92       	push	r4
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 3a0:	5f 92       	push	r5
 3a2:	6f 92       	push	r6
 3a4:	7f 92       	push	r7
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	d8 2f       	mov	r29, r24
 3c0:	7b 01       	movw	r14, r22
 3c2:	c4 2f       	mov	r28, r20
 3c4:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 3c6:	8c 30       	cpi	r24, 0x0C	; 12
 3c8:	29 f0       	breq	.+10     	; 0x3d4 <mfrc522_to_card+0x36>
 3ca:	8e 30       	cpi	r24, 0x0E	; 14
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 3ce:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 3d0:	81 2c       	mov	r8, r1
 3d2:	10 c0       	rjmp	.+32     	; 0x3f4 <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 3d4:	0f 2e       	mov	r0, r31
 3d6:	f0 e3       	ldi	r31, 0x30	; 48
 3d8:	9f 2e       	mov	r9, r31
 3da:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 3dc:	0f 2e       	mov	r0, r31
 3de:	f7 e7       	ldi	r31, 0x77	; 119
 3e0:	8f 2e       	mov	r8, r31
 3e2:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 3e6:	68 94       	set
 3e8:	99 24       	eor	r9, r9
 3ea:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 3ec:	0f 2e       	mov	r0, r31
 3ee:	f2 e1       	ldi	r31, 0x12	; 18
 3f0:	8f 2e       	mov	r8, r31
 3f2:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	a3 df       	rcall	.-186    	; 0x33e <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 3f8:	68 2f       	mov	r22, r24
 3fa:	6f 77       	andi	r22, 0x7F	; 127
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	8e df       	rcall	.-228    	; 0x31c <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	9d df       	rcall	.-198    	; 0x33e <mfrc522_read>
 404:	68 2f       	mov	r22, r24
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 406:	60 68       	ori	r22, 0x80	; 128
 408:	8a e0       	ldi	r24, 0x0A	; 10
 40a:	88 df       	rcall	.-240    	; 0x31c <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	85 df       	rcall	.-246    	; 0x31c <mfrc522_write>
 412:	41 2c       	mov	r4, r1

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 414:	51 2c       	mov	r5, r1
 416:	32 01       	movw	r6, r4
 418:	0b c0       	rjmp	.+22     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41a:	f7 01       	movw	r30, r14
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 41c:	e4 0d       	add	r30, r4
 41e:	f5 1d       	adc	r31, r5
 420:	60 81       	ld	r22, Z
 422:	89 e0       	ldi	r24, 0x09	; 9
 424:	7b df       	rcall	.-266    	; 0x31c <mfrc522_write>
 426:	8f ef       	ldi	r24, 0xFF	; 255
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 428:	48 1a       	sub	r4, r24
 42a:	58 0a       	sbc	r5, r24
 42c:	68 0a       	sbc	r6, r24
 42e:	78 0a       	sbc	r7, r24
 430:	8c 2f       	mov	r24, r28
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	a0 e0       	ldi	r26, 0x00	; 0
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	48 16       	cp	r4, r24
 43a:	59 06       	cpc	r5, r25
 43c:	6a 06       	cpc	r6, r26
 43e:	7b 06       	cpc	r7, r27
 440:	60 f3       	brcs	.-40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 442:	6d 2f       	mov	r22, r29
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	6a df       	rcall	.-300    	; 0x31c <mfrc522_write>
    if (cmd == Transceive_CMD)
 448:	dc 30       	cpi	r29, 0x0C	; 12
    {    
		n=mfrc522_read(BitFramingReg);
 44a:	31 f4       	brne	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44c:	8d e0       	ldi	r24, 0x0D	; 13
 44e:	77 df       	rcall	.-274    	; 0x33e <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 450:	68 2f       	mov	r22, r24
 452:	60 68       	ori	r22, 0x80	; 128
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	62 df       	rcall	.-316    	; 0x31c <mfrc522_write>
 458:	0f 2e       	mov	r0, r31
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 45a:	f0 ed       	ldi	r31, 0xD0	; 208
 45c:	cf 2e       	mov	r12, r31
 45e:	f7 e0       	ldi	r31, 0x07	; 7
 460:	df 2e       	mov	r13, r31
 462:	e1 2c       	mov	r14, r1
 464:	f1 2c       	mov	r15, r1
 466:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	69 df       	rcall	.-302    	; 0x33e <mfrc522_read>
 46c:	c8 2f       	mov	r28, r24
 46e:	e1 e0       	ldi	r30, 0x01	; 1
        i--;
 470:	ce 1a       	sub	r12, r30
 472:	d1 08       	sbc	r13, r1
 474:	e1 08       	sbc	r14, r1
 476:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 478:	29 f0       	breq	.+10     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47a:	80 fd       	sbrc	r24, 0
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	89 2d       	mov	r24, r9
 480:	8c 23       	and	r24, r28

	tmp=mfrc522_read(BitFramingReg);
 482:	91 f3       	breq	.-28     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 484:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 486:	5b df       	rcall	.-330    	; 0x33e <mfrc522_read>
 488:	68 2f       	mov	r22, r24
 48a:	6f 77       	andi	r22, 0x7F	; 127
 48c:	8d e0       	ldi	r24, 0x0D	; 13
 48e:	46 df       	rcall	.-372    	; 0x31c <mfrc522_write>
	
    if (i != 0)
 490:	cd 28       	or	r12, r13
 492:	ce 28       	or	r12, r14
 494:	cf 28       	or	r12, r15
 496:	09 f4       	brne	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	5c c0       	rjmp	.+184    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	50 df       	rcall	.-352    	; 0x33e <mfrc522_read>
 49e:	8b 71       	andi	r24, 0x1B	; 27
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	59 c0       	rjmp	.+178    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 4a4:	c8 21       	and	r28, r8
 4a6:	c0 fd       	sbrc	r28, 0
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	c1 e0       	ldi	r28, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			}

            if (cmd == Transceive_CMD)
 4ae:	c2 e0       	ldi	r28, 0x02	; 2
 4b0:	dc 30       	cpi	r29, 0x0C	; 12
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
            {
               	n = mfrc522_read(FIFOLevelReg);
 4b4:	51 c0       	rjmp	.+162    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 4b6:	8a e0       	ldi	r24, 0x0A	; 10
 4b8:	42 df       	rcall	.-380    	; 0x33e <mfrc522_read>
 4ba:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 4bc:	8c e0       	ldi	r24, 0x0C	; 12
 4be:	3f df       	rcall	.-386    	; 0x33e <mfrc522_read>
 4c0:	28 2f       	mov	r18, r24
 4c2:	27 70       	andi	r18, 0x07	; 7
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
                if (lastBits)
 4c6:	8d 2f       	mov	r24, r29
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	82 0f       	add	r24, r18
 4da:	91 1d       	adc	r25, r1
 4dc:	09 2e       	mov	r0, r25
 4de:	00 0c       	add	r0, r0
 4e0:	aa 0b       	sbc	r26, r26
 4e2:	bb 0b       	sbc	r27, r27
 4e4:	f8 01       	movw	r30, r16
 4e6:	80 83       	st	Z, r24
 4e8:	91 83       	std	Z+1, r25	; 0x01
 4ea:	a2 83       	std	Z+2, r26	; 0x02
 4ec:	b3 83       	std	Z+3, r27	; 0x03
 4ee:	11 c0       	rjmp	.+34     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4f0:	8d 2f       	mov	r24, r29
				}
                else
                {   
					*back_data_len = n*8;   
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	09 2e       	mov	r0, r25
 502:	00 0c       	add	r0, r0
 504:	aa 0b       	sbc	r26, r26
 506:	bb 0b       	sbc	r27, r27
 508:	f8 01       	movw	r30, r16
 50a:	80 83       	st	Z, r24
 50c:	91 83       	std	Z+1, r25	; 0x01
 50e:	a2 83       	std	Z+2, r26	; 0x02
 510:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 512:	d1 11       	cpse	r29, r1
 514:	01 c0       	rjmp	.+2      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
                {   
					n = 1;    
 516:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 518:	d1 31       	cpi	r29, 0x11	; 17
 51a:	08 f0       	brcs	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
                {   
					n = MAX_LEN;   
 51c:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 51e:	c1 2c       	mov	r12, r1
 520:	d1 2c       	mov	r13, r1
 522:	76 01       	movw	r14, r12
 524:	0c c0       	rjmp	.+24     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 526:	85 01       	movw	r16, r10
 528:	0c 0d       	add	r16, r12
 52a:	1d 1d       	adc	r17, r13
 52c:	89 e0       	ldi	r24, 0x09	; 9
 52e:	07 df       	rcall	.-498    	; 0x33e <mfrc522_read>
 530:	f8 01       	movw	r30, r16
 532:	80 83       	st	Z, r24
 534:	ff ef       	ldi	r31, 0xFF	; 255
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 536:	cf 1a       	sub	r12, r31
 538:	df 0a       	sbc	r13, r31
 53a:	ef 0a       	sbc	r14, r31
 53c:	ff 0a       	sbc	r15, r31
 53e:	8d 2f       	mov	r24, r29
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	a0 e0       	ldi	r26, 0x00	; 0
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	c8 16       	cp	r12, r24
 548:	d9 06       	cpc	r13, r25
 54a:	ea 06       	cpc	r14, r26
 54c:	fb 06       	cpc	r15, r27
 54e:	58 f3       	brcs	.-42     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 550:	03 c0       	rjmp	.+6      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 552:	c3 e0       	ldi	r28, 0x03	; 3
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 554:	01 c0       	rjmp	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 556:	c3 e0       	ldi	r28, 0x03	; 3
				}
            }
        }
        else
        {   
			status = ERROR;  
 558:	8c 2f       	mov	r24, r28
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	af 90       	pop	r10
 56e:	9f 90       	pop	r9
 570:	8f 90       	pop	r8
 572:	7f 90       	pop	r7
 574:	6f 90       	pop	r6
 576:	5f 90       	pop	r5
 578:	4f 90       	pop	r4
 57a:	08 95       	ret

0000057c <mfrc522_request>:
 57c:	ef 92       	push	r14
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	00 d0       	rcall	.+0      	; 0x58a <mfrc522_request+0xe>
 58a:	1f 92       	push	r1
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	18 2f       	mov	r17, r24
 592:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 594:	67 e0       	ldi	r22, 0x07	; 7
 596:	8d e0       	ldi	r24, 0x0D	; 13
 598:	c1 de       	rcall	.-638    	; 0x31c <mfrc522_write>
	
	tag_type[0] = req_mode;
 59a:	f7 01       	movw	r30, r14
 59c:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 59e:	8e 01       	movw	r16, r28
 5a0:	0f 5f       	subi	r16, 0xFF	; 255
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	97 01       	movw	r18, r14
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	b7 01       	movw	r22, r14
 5aa:	8c e0       	ldi	r24, 0x0C	; 12
 5ac:	f8 de       	rcall	.-528    	; 0x39e <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	51 f4       	brne	.+20     	; 0x5c6 <mfrc522_request+0x4a>
 5b2:	49 81       	ldd	r20, Y+1	; 0x01
 5b4:	5a 81       	ldd	r21, Y+2	; 0x02
 5b6:	6b 81       	ldd	r22, Y+3	; 0x03
 5b8:	7c 81       	ldd	r23, Y+4	; 0x04
 5ba:	40 31       	cpi	r20, 0x10	; 16
 5bc:	51 05       	cpc	r21, r1
 5be:	61 05       	cpc	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	19 f4       	brne	.+6      	; 0x5ca <mfrc522_request+0x4e>
 5c4:	03 c0       	rjmp	.+6      	; 0x5cc <mfrc522_request+0x50>
	{    
		status = ERROR;
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <mfrc522_request+0x50>
 5ca:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	ff 90       	pop	r15
 5de:	ef 90       	pop	r14
 5e0:	08 95       	ret

000005e2 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <mfrc522_get_card_serial+0xe>
 5f0:	1f 92       	push	r1
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	8d e0       	ldi	r24, 0x0D	; 13
 5fc:	8f de       	rcall	.-738    	; 0x31c <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 5fe:	83 e9       	ldi	r24, 0x93	; 147
 600:	f7 01       	movw	r30, r14
 602:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 608:	8e 01       	movw	r16, r28
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	97 01       	movw	r18, r14
 610:	42 e0       	ldi	r20, 0x02	; 2
 612:	b7 01       	movw	r22, r14
 614:	8c e0       	ldi	r24, 0x0C	; 12
 616:	c3 de       	rcall	.-634    	; 0x39e <mfrc522_to_card>

    if (status == CARD_FOUND)
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	91 f4       	brne	.+36     	; 0x640 <mfrc522_get_card_serial+0x5e>
 61c:	07 c0       	rjmp	.+14     	; 0x62c <mfrc522_get_card_serial+0x4a>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 61e:	f7 01       	movw	r30, r14
 620:	e9 0f       	add	r30, r25
 622:	f1 1d       	adc	r31, r1
 624:	30 81       	ld	r19, Z
 626:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 628:	9f 5f       	subi	r25, 0xFF	; 255
 62a:	02 c0       	rjmp	.+4      	; 0x630 <mfrc522_get_card_serial+0x4e>
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	94 30       	cpi	r25, 0x04	; 4
 632:	a8 f3       	brcs	.-22     	; 0x61e <mfrc522_get_card_serial+0x3c>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 634:	f7 01       	movw	r30, r14
 636:	e9 0f       	add	r30, r25
 638:	f1 1d       	adc	r31, r1
 63a:	90 81       	ld	r25, Z
 63c:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 63e:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	08 95       	ret

00000656 <initUSART>:
uint8_t SelfTestBuffer[64];
int Database_Status =0;

void initUSART(void)
{
	UBRR0H = (unsigned char)(UBRR_VALUE>>8);
 656:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)(UBRR_VALUE);
 65a:	87 e6       	ldi	r24, 0x67	; 103
 65c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 660:	88 e9       	ldi	r24, 0x98	; 152
 662:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (3<<UCSZ00);
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	
	sei();
 66c:	78 94       	sei
 66e:	08 95       	ret

00000670 <transmitUSART>:
}


void transmitUSART(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 670:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 674:	95 ff       	sbrs	r25, 5
 676:	fc cf       	rjmp	.-8      	; 0x670 <transmitUSART>
	UDR0 = data;
 678:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 67c:	08 95       	ret

0000067e <receiveUSART>:
}

unsigned char receiveUSART(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 67e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 682:	88 23       	and	r24, r24
 684:	e4 f7       	brge	.-8      	; 0x67e <receiveUSART>
	return UDR0;	
 686:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 68a:	08 95       	ret

0000068c <main>:
 
int main()
{
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	62 97       	sbiw	r28, 0x12	; 18
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a0:	2f ef       	ldi	r18, 0xFF	; 255
 6a2:	8b e7       	ldi	r24, 0x7B	; 123
 6a4:	92 e9       	ldi	r25, 0x92	; 146
 6a6:	21 50       	subi	r18, 0x01	; 1
 6a8:	80 40       	sbci	r24, 0x00	; 0
 6aa:	90 40       	sbci	r25, 0x00	; 0
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x1a>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x24>
 6b0:	00 00       	nop
	_delay_ms(3000);
	LCDInit(LS_BLINK);
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	e4 dd       	rcall	.-1080   	; 0x27e <LCDInit>
	LCDWriteStringXY(2,0,"Starting...");
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	d0 dd       	rcall	.-1120   	; 0x25c <LCDGotoXY>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	92 e0       	ldi	r25, 0x02	; 2
 6c0:	a7 dd       	rcall	.-1202   	; 0x210 <LCDWriteString>
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	8b e7       	ldi	r24, 0x7B	; 123
 6c6:	92 e9       	ldi	r25, 0x92	; 146
 6c8:	21 50       	subi	r18, 0x01	; 1
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x3c>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x46>
 6d2:	00 00       	nop
	_delay_ms(3000);
	EICRA |= 0x03;
 6d4:	e9 e6       	ldi	r30, 0x69	; 105
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	83 60       	ori	r24, 0x03	; 3
 6dc:	80 83       	st	Z, r24
	EIMSK |= 0x01;
 6de:	8d b3       	in	r24, 0x1d	; 29
 6e0:	81 60       	ori	r24, 0x01	; 1
	sei();
 6e2:	8d bb       	out	0x1d, r24	; 29

	initUSART();
 6e4:	78 94       	sei
 6e6:	b7 df       	rcall	.-146    	; 0x656 <initUSART>
	volatile unsigned rxData;

	DDRL |= 0B00000011;
 6e8:	ea e0       	ldi	r30, 0x0A	; 10
 6ea:	f1 e0       	ldi	r31, 0x01	; 1
 6ec:	80 81       	ld	r24, Z
 6ee:	83 60       	ori	r24, 0x03	; 3
 6f0:	80 83       	st	Z, r24
	PORTL |= 0B00000001;
 6f2:	eb e0       	ldi	r30, 0x0B	; 11
 6f4:	f1 e0       	ldi	r31, 0x01	; 1
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
	uint8_t byte;
	uint8_t str[MAX_LEN];
	
	LCDWriteStringXY(2,0,"RFID Reader");
 6fa:	80 83       	st	Z, r24
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	ad dd       	rcall	.-1190   	; 0x25c <LCDGotoXY>
 702:	8c e0       	ldi	r24, 0x0C	; 12
 704:	92 e0       	ldi	r25, 0x02	; 2
	LCDWriteStringXY(5,1,VERSION_STR);
 706:	84 dd       	rcall	.-1272   	; 0x210 <LCDWriteString>
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	85 e0       	ldi	r24, 0x05	; 5
 70c:	a7 dd       	rcall	.-1202   	; 0x25c <LCDGotoXY>
 70e:	88 e1       	ldi	r24, 0x18	; 24
 710:	92 e0       	ldi	r25, 0x02	; 2
 712:	7e dd       	rcall	.-1284   	; 0x210 <LCDWriteString>
	
	
	spi_init();
 714:	f8 dd       	rcall	.-1040   	; 0x306 <spi_init>
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	83 ed       	ldi	r24, 0xD3	; 211
 71a:	90 e3       	ldi	r25, 0x30	; 48
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	80 40       	sbci	r24, 0x00	; 0
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x90>
	_delay_ms(1000);
	LCDClear();
 724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x9a>
 726:	00 00       	nop
 728:	60 e0       	ldi	r22, 0x00	; 0
	
	//init reader
	mfrc522_init();
 72a:	81 e0       	ldi	r24, 0x01	; 1
	
	//check version of the reader
	byte = mfrc522_read(VersionReg);
 72c:	3a dd       	rcall	.-1420   	; 0x1a2 <LCDByte>
 72e:	1a de       	rcall	.-972    	; 0x364 <mfrc522_init>
	if(byte == 0x92)
 730:	87 e3       	ldi	r24, 0x37	; 55
	{
		LCDWriteStringXY(1,0,"MIFARE RC522v2");
 732:	05 de       	rcall	.-1014   	; 0x33e <mfrc522_read>
 734:	82 39       	cpi	r24, 0x92	; 146
 736:	81 f4       	brne	.+32     	; 0x758 <main+0xcc>
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	8f dd       	rcall	.-1250   	; 0x25c <LCDGotoXY>
 73e:	8e e1       	ldi	r24, 0x1E	; 30
		LCDWriteStringXY(4,1,"Detected");
 740:	92 e0       	ldi	r25, 0x02	; 2
 742:	66 dd       	rcall	.-1332   	; 0x210 <LCDWriteString>
 744:	61 e0       	ldi	r22, 0x01	; 1
 746:	84 e0       	ldi	r24, 0x04	; 4
 748:	89 dd       	rcall	.-1262   	; 0x25c <LCDGotoXY>
 74a:	8d e2       	ldi	r24, 0x2D	; 45
		LCDCur();
 74c:	92 e0       	ldi	r25, 0x02	; 2
 74e:	60 dd       	rcall	.-1344   	; 0x210 <LCDWriteString>
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	8c e0       	ldi	r24, 0x0C	; 12
	}else if(byte == 0x91 || byte==0x90)
 754:	26 dd       	rcall	.-1460   	; 0x1a2 <LCDByte>
 756:	19 c0       	rjmp	.+50     	; 0x78a <main+0xfe>
	{
		LCDWriteStringXY(1,0,"MIFARE RC522v1");
 758:	80 59       	subi	r24, 0x90	; 144
 75a:	82 30       	cpi	r24, 0x02	; 2
 75c:	80 f4       	brcc	.+32     	; 0x77e <main+0xf2>
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	7c dd       	rcall	.-1288   	; 0x25c <LCDGotoXY>
		LCDWriteStringXY(4,1,"Detected");
 764:	86 e3       	ldi	r24, 0x36	; 54
 766:	92 e0       	ldi	r25, 0x02	; 2
 768:	53 dd       	rcall	.-1370   	; 0x210 <LCDWriteString>
 76a:	61 e0       	ldi	r22, 0x01	; 1
 76c:	84 e0       	ldi	r24, 0x04	; 4
 76e:	76 dd       	rcall	.-1300   	; 0x25c <LCDGotoXY>
 770:	8d e2       	ldi	r24, 0x2D	; 45
 772:	92 e0       	ldi	r25, 0x02	; 2
		LCDCur();
 774:	4d dd       	rcall	.-1382   	; 0x210 <LCDWriteString>
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	8c e0       	ldi	r24, 0x0C	; 12
 77a:	13 dd       	rcall	.-1498   	; 0x1a2 <LCDByte>
	}else
	{
		LCDWriteStringXY(0,0,"No reader found");
 77c:	06 c0       	rjmp	.+12     	; 0x78a <main+0xfe>
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	6c dd       	rcall	.-1320   	; 0x25c <LCDGotoXY>
 784:	85 e4       	ldi	r24, 0x45	; 69
 786:	92 e0       	ldi	r25, 0x02	; 2
 788:	43 dd       	rcall	.-1402   	; 0x210 <LCDWriteString>
 78a:	2f ef       	ldi	r18, 0xFF	; 255
 78c:	8d e3       	ldi	r24, 0x3D	; 61
 78e:	99 e4       	ldi	r25, 0x49	; 73
 790:	21 50       	subi	r18, 0x01	; 1
 792:	80 40       	sbci	r24, 0x00	; 0
 794:	90 40       	sbci	r25, 0x00	; 0
	}

	_delay_ms(1500);
	LCDClear();
 796:	e1 f7       	brne	.-8      	; 0x790 <main+0x104>
 798:	00 c0       	rjmp	.+0      	; 0x79a <main+0x10e>
 79a:	00 00       	nop
	
	while(1){
		
		if (Database_Status==1)
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	00 dd       	rcall	.-1536   	; 0x1a2 <LCDByte>
 7a2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <__data_end>
		{
			LCDClear();
 7a6:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <__data_end+0x1>
 7aa:	01 97       	sbiw	r24, 0x01	; 1
			LCDWriteStringXY(1,0,"Show Your Card ");
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <main+0x124>
 7ae:	4a c0       	rjmp	.+148    	; 0x844 <main+0x1b8>
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	f6 dc       	rcall	.-1556   	; 0x1a2 <LCDByte>
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	81 e0       	ldi	r24, 0x01	; 1
			LCDCur();   //stop cursor blinking
 7ba:	50 dd       	rcall	.-1376   	; 0x25c <LCDGotoXY>
 7bc:	85 e5       	ldi	r24, 0x55	; 85
 7be:	92 e0       	ldi	r25, 0x02	; 2
 7c0:	27 dd       	rcall	.-1458   	; 0x210 <LCDWriteString>
			byte = mfrc522_read(ComIEnReg);
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	8c e0       	ldi	r24, 0x0C	; 12
 7c6:	ed dc       	rcall	.-1574   	; 0x1a2 <LCDByte>
			mfrc522_write(ComIEnReg,byte|0x20);
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	b9 dd       	rcall	.-1166   	; 0x33e <mfrc522_read>
 7cc:	68 2f       	mov	r22, r24
 7ce:	60 62       	ori	r22, 0x20	; 32
 7d0:	82 e0       	ldi	r24, 0x02	; 2
			byte = mfrc522_read(DivIEnReg);
 7d2:	a4 dd       	rcall	.-1208   	; 0x31c <mfrc522_write>
 7d4:	83 e0       	ldi	r24, 0x03	; 3
 7d6:	b3 dd       	rcall	.-1178   	; 0x33e <mfrc522_read>
			mfrc522_write(DivIEnReg,byte|0x80);
 7d8:	68 2f       	mov	r22, r24
 7da:	60 68       	ori	r22, 0x80	; 128
 7dc:	83 e0       	ldi	r24, 0x03	; 3
 7de:	9e dd       	rcall	.-1220   	; 0x31c <mfrc522_write>
 7e0:	be 01       	movw	r22, r28
			byte = mfrc522_request(PICC_REQALL,str);
 7e2:	6d 5f       	subi	r22, 0xFD	; 253
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	82 e5       	ldi	r24, 0x52	; 82
 7e8:	c9 de       	rcall	.-622    	; 0x57c <mfrc522_request>
 7ea:	81 30       	cpi	r24, 0x01	; 1
			if(byte == CARD_FOUND)
 7ec:	d1 f6       	brne	.-76     	; 0x7a2 <main+0x116>
 7ee:	ce 01       	movw	r24, r28
			{
				byte = mfrc522_get_card_serial(str);
 7f0:	03 96       	adiw	r24, 0x03	; 3
 7f2:	f7 de       	rcall	.-530    	; 0x5e2 <mfrc522_get_card_serial>
 7f4:	81 30       	cpi	r24, 0x01	; 1
				if(byte == CARD_FOUND)
 7f6:	e1 f4       	brne	.+56     	; 0x830 <main+0x1a4>
 7f8:	8f e3       	ldi	r24, 0x3F	; 63
 7fa:	9c e9       	ldi	r25, 0x9C	; 156
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <main+0x170>
 800:	00 c0       	rjmp	.+0      	; 0x802 <main+0x176>
				{
					_delay_ms(10);
					for(int i=0;i<4;i++)
 802:	00 00       	nop
 804:	00 e0       	ldi	r16, 0x00	; 0
 806:	10 e0       	ldi	r17, 0x00	; 0
					{
						rxData =str[i];
 808:	0f c0       	rjmp	.+30     	; 0x828 <main+0x19c>
 80a:	e3 e0       	ldi	r30, 0x03	; 3
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	ec 0f       	add	r30, r28
 810:	fd 1f       	adc	r31, r29
 812:	e0 0f       	add	r30, r16
 814:	f1 1f       	adc	r31, r17
 816:	80 81       	ld	r24, Z
						transmitUSART(rxData);
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	9a 83       	std	Y+2, r25	; 0x02
 81c:	89 83       	std	Y+1, r24	; 0x01
			{
				byte = mfrc522_get_card_serial(str);
				if(byte == CARD_FOUND)
				{
					_delay_ms(10);
					for(int i=0;i<4;i++)
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	9a 81       	ldd	r25, Y+2	; 0x02
 822:	26 df       	rcall	.-436    	; 0x670 <transmitUSART>
 824:	0f 5f       	subi	r16, 0xFF	; 255
						transmitUSART(rxData);
					}
				}
				else
				{
					LCDClear();
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	04 30       	cpi	r16, 0x04	; 4
 82a:	11 05       	cpc	r17, r1
					LCDWriteStringXY(5,0,"Error");
 82c:	74 f3       	brlt	.-36     	; 0x80a <main+0x17e>
 82e:	b9 cf       	rjmp	.-142    	; 0x7a2 <main+0x116>
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	b6 dc       	rcall	.-1684   	; 0x1a2 <LCDByte>
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	85 e0       	ldi	r24, 0x05	; 5
 83a:	10 dd       	rcall	.-1504   	; 0x25c <LCDGotoXY>
 83c:	85 e6       	ldi	r24, 0x65	; 101
 83e:	92 e0       	ldi	r25, 0x02	; 2
 840:	e7 dc       	rcall	.-1586   	; 0x210 <LCDWriteString>
 842:	af cf       	rjmp	.-162    	; 0x7a2 <main+0x116>
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	23 ed       	ldi	r18, 0xD3	; 211
 848:	80 e3       	ldi	r24, 0x30	; 48
 84a:	91 50       	subi	r25, 0x01	; 1
 84c:	20 40       	sbci	r18, 0x00	; 0
 84e:	80 40       	sbci	r24, 0x00	; 0
			}
		}
		else
		{
			_delay_ms(1000);
			LCDClear();
 850:	e1 f7       	brne	.-8      	; 0x84a <main+0x1be>
 852:	00 c0       	rjmp	.+0      	; 0x854 <main+0x1c8>
 854:	00 00       	nop
 856:	60 e0       	ldi	r22, 0x00	; 0
			LCDWriteStringXY(2,0,"Database Not");
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	a3 dc       	rcall	.-1722   	; 0x1a2 <LCDByte>
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	fd dc       	rcall	.-1542   	; 0x25c <LCDGotoXY>
 862:	8b e6       	ldi	r24, 0x6B	; 107
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	d4 dc       	rcall	.-1624   	; 0x210 <LCDWriteString>
			LCDWriteStringXY(5,1,"Found");
 868:	61 e0       	ldi	r22, 0x01	; 1
 86a:	85 e0       	ldi	r24, 0x05	; 5
 86c:	f7 dc       	rcall	.-1554   	; 0x25c <LCDGotoXY>
 86e:	88 e7       	ldi	r24, 0x78	; 120
 870:	92 e0       	ldi	r25, 0x02	; 2
 872:	ce dc       	rcall	.-1636   	; 0x210 <LCDWriteString>
 874:	60 e0       	ldi	r22, 0x00	; 0
 876:	8c e0       	ldi	r24, 0x0C	; 12
			LCDCur();
 878:	94 dc       	rcall	.-1752   	; 0x1a2 <LCDByte>
 87a:	93 cf       	rjmp	.-218    	; 0x7a2 <main+0x116>

0000087c <door_action>:
 87c:	cf 93       	push	r28
 87e:	df 93       	push	r29
 880:	61 e0       	ldi	r22, 0x01	; 1
	}
	return 0;
}
void door_action(void)
{
	LCDWriteStringXY(0,1,"Opening Door ...");
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	eb dc       	rcall	.-1578   	; 0x25c <LCDGotoXY>
 886:	8e e7       	ldi	r24, 0x7E	; 126
 888:	92 e0       	ldi	r25, 0x02	; 2
 88a:	c2 dc       	rcall	.-1660   	; 0x210 <LCDWriteString>
	PORTL |= 0B00000010;
 88c:	cb e0       	ldi	r28, 0x0B	; 11
 88e:	d1 e0       	ldi	r29, 0x01	; 1
 890:	88 81       	ld	r24, Y
 892:	82 60       	ori	r24, 0x02	; 2
 894:	88 83       	st	Y, r24
 896:	2f ef       	ldi	r18, 0xFF	; 255
 898:	83 ec       	ldi	r24, 0xC3	; 195
 89a:	99 e0       	ldi	r25, 0x09	; 9
 89c:	21 50       	subi	r18, 0x01	; 1
 89e:	80 40       	sbci	r24, 0x00	; 0
 8a0:	90 40       	sbci	r25, 0x00	; 0
 8a2:	e1 f7       	brne	.-8      	; 0x89c <door_action+0x20>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <door_action+0x2a>
 8a6:	00 00       	nop
	_delay_ms(200);
	PORTL &= 0B00000001;
 8a8:	88 81       	ld	r24, Y
 8aa:	81 70       	andi	r24, 0x01	; 1
 8ac:	88 83       	st	Y, r24
 8ae:	2f ef       	ldi	r18, 0xFF	; 255
 8b0:	83 ec       	ldi	r24, 0xC3	; 195
 8b2:	99 e0       	ldi	r25, 0x09	; 9
 8b4:	21 50       	subi	r18, 0x01	; 1
 8b6:	80 40       	sbci	r24, 0x00	; 0
 8b8:	90 40       	sbci	r25, 0x00	; 0
 8ba:	e1 f7       	brne	.-8      	; 0x8b4 <door_action+0x38>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <door_action+0x42>
 8be:	00 00       	nop
	_delay_ms(200);
	PORTL |= 0B00000010;
 8c0:	88 81       	ld	r24, Y
 8c2:	82 60       	ori	r24, 0x02	; 2
 8c4:	88 83       	st	Y, r24
 8c6:	2f ef       	ldi	r18, 0xFF	; 255
 8c8:	87 e8       	ldi	r24, 0x87	; 135
 8ca:	93 e1       	ldi	r25, 0x13	; 19
 8cc:	21 50       	subi	r18, 0x01	; 1
 8ce:	80 40       	sbci	r24, 0x00	; 0
 8d0:	90 40       	sbci	r25, 0x00	; 0
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <door_action+0x50>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <door_action+0x5a>
 8d6:	00 00       	nop
	_delay_ms(400);
	PORTL &= 0B00000000;  //Relay
 8d8:	88 81       	ld	r24, Y
 8da:	18 82       	st	Y, r1
 8dc:	2f ef       	ldi	r18, 0xFF	; 255
 8de:	8f e4       	ldi	r24, 0x4F	; 79
 8e0:	93 ec       	ldi	r25, 0xC3	; 195
 8e2:	21 50       	subi	r18, 0x01	; 1
 8e4:	80 40       	sbci	r24, 0x00	; 0
 8e6:	90 40       	sbci	r25, 0x00	; 0
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <door_action+0x66>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <door_action+0x70>
 8ec:	00 00       	nop
	_delay_ms(4000);
	LCDWriteStringXY(0,1,"Closing Door ...");
 8ee:	61 e0       	ldi	r22, 0x01	; 1
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	b4 dc       	rcall	.-1688   	; 0x25c <LCDGotoXY>
 8f4:	8f e8       	ldi	r24, 0x8F	; 143
 8f6:	92 e0       	ldi	r25, 0x02	; 2
 8f8:	8b dc       	rcall	.-1770   	; 0x210 <LCDWriteString>
	LCDCur();
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	8c e0       	ldi	r24, 0x0C	; 12
 8fe:	51 dc       	rcall	.-1886   	; 0x1a2 <LCDByte>
 900:	2f ef       	ldi	r18, 0xFF	; 255
 902:	83 ed       	ldi	r24, 0xD3	; 211
 904:	90 e3       	ldi	r25, 0x30	; 48
 906:	21 50       	subi	r18, 0x01	; 1
 908:	80 40       	sbci	r24, 0x00	; 0
 90a:	90 40       	sbci	r25, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <door_action+0x8a>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <door_action+0x94>
 910:	00 00       	nop
 912:	88 81       	ld	r24, Y
	_delay_ms(1000);
	PORTL |= 0B00000001;
 914:	81 60       	ori	r24, 0x01	; 1
 916:	88 83       	st	Y, r24
 918:	df 91       	pop	r29
}
 91a:	cf 91       	pop	r28
 91c:	08 95       	ret

0000091e <door_action_error>:
 91e:	60 e0       	ldi	r22, 0x00	; 0
void door_action_error(void)
{
	LCDWriteStringXY(0,0,"Access denied !");
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	9c dc       	rcall	.-1736   	; 0x25c <LCDGotoXY>
 924:	80 ea       	ldi	r24, 0xA0	; 160
 926:	92 e0       	ldi	r25, 0x02	; 2
 928:	73 dc       	rcall	.-1818   	; 0x210 <LCDWriteString>
	LCDWriteStringXY(3,1,"Locked ...   ");
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	83 e0       	ldi	r24, 0x03	; 3
 92e:	96 dc       	rcall	.-1748   	; 0x25c <LCDGotoXY>
 930:	80 eb       	ldi	r24, 0xB0	; 176
 932:	92 e0       	ldi	r25, 0x02	; 2
 934:	6d dc       	rcall	.-1830   	; 0x210 <LCDWriteString>
	LCDCur();
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	8c e0       	ldi	r24, 0x0C	; 12
 93a:	33 dc       	rcall	.-1946   	; 0x1a2 <LCDByte>
 93c:	eb e0       	ldi	r30, 0x0B	; 11
	PORTL |= 0B00000010;  //Buzzer
 93e:	f1 e0       	ldi	r31, 0x01	; 1
 940:	80 81       	ld	r24, Z
 942:	82 60       	ori	r24, 0x02	; 2
 944:	80 83       	st	Z, r24
 946:	2f ef       	ldi	r18, 0xFF	; 255
 948:	85 ea       	ldi	r24, 0xA5	; 165
 94a:	9e e0       	ldi	r25, 0x0E	; 14
 94c:	21 50       	subi	r18, 0x01	; 1
 94e:	80 40       	sbci	r24, 0x00	; 0
 950:	90 40       	sbci	r25, 0x00	; 0
 952:	e1 f7       	brne	.-8      	; 0x94c <door_action_error+0x2e>
 954:	00 c0       	rjmp	.+0      	; 0x956 <door_action_error+0x38>
 956:	00 00       	nop
 958:	80 81       	ld	r24, Z
	_delay_ms(300);
	PORTL &= 0B00000001;
 95a:	81 70       	andi	r24, 0x01	; 1
 95c:	80 83       	st	Z, r24
 95e:	2f ef       	ldi	r18, 0xFF	; 255
 960:	83 ec       	ldi	r24, 0xC3	; 195
 962:	99 e0       	ldi	r25, 0x09	; 9
 964:	21 50       	subi	r18, 0x01	; 1
 966:	80 40       	sbci	r24, 0x00	; 0
 968:	90 40       	sbci	r25, 0x00	; 0
 96a:	e1 f7       	brne	.-8      	; 0x964 <door_action_error+0x46>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <door_action_error+0x50>
 96e:	00 00       	nop
 970:	80 81       	ld	r24, Z
	_delay_ms(200);
	PORTL |= 0B00000010;
 972:	82 60       	ori	r24, 0x02	; 2
 974:	80 83       	st	Z, r24
 976:	2f ef       	ldi	r18, 0xFF	; 255
 978:	85 ea       	ldi	r24, 0xA5	; 165
 97a:	9e e0       	ldi	r25, 0x0E	; 14
 97c:	21 50       	subi	r18, 0x01	; 1
 97e:	80 40       	sbci	r24, 0x00	; 0
 980:	90 40       	sbci	r25, 0x00	; 0
 982:	e1 f7       	brne	.-8      	; 0x97c <door_action_error+0x5e>
 984:	00 c0       	rjmp	.+0      	; 0x986 <door_action_error+0x68>
 986:	00 00       	nop
 988:	80 81       	ld	r24, Z
	_delay_ms(300);
	PORTL &= 0B00000001;
 98a:	81 70       	andi	r24, 0x01	; 1
 98c:	80 83       	st	Z, r24
 98e:	2f ef       	ldi	r18, 0xFF	; 255
 990:	83 ec       	ldi	r24, 0xC3	; 195
 992:	99 e0       	ldi	r25, 0x09	; 9
 994:	21 50       	subi	r18, 0x01	; 1
 996:	80 40       	sbci	r24, 0x00	; 0
 998:	90 40       	sbci	r25, 0x00	; 0
 99a:	e1 f7       	brne	.-8      	; 0x994 <door_action_error+0x76>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <door_action_error+0x80>
 99e:	00 00       	nop
 9a0:	80 81       	ld	r24, Z
	_delay_ms(200);
	PORTL |= 0B00000010;
 9a2:	82 60       	ori	r24, 0x02	; 2
 9a4:	80 83       	st	Z, r24
 9a6:	2f ef       	ldi	r18, 0xFF	; 255
 9a8:	85 ea       	ldi	r24, 0xA5	; 165
 9aa:	9e e0       	ldi	r25, 0x0E	; 14
 9ac:	21 50       	subi	r18, 0x01	; 1
 9ae:	80 40       	sbci	r24, 0x00	; 0
 9b0:	90 40       	sbci	r25, 0x00	; 0
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <door_action_error+0x8e>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <door_action_error+0x98>
 9b6:	00 00       	nop
 9b8:	80 81       	ld	r24, Z
	_delay_ms(300);
	PORTL &= 0B00000001;
 9ba:	81 70       	andi	r24, 0x01	; 1
 9bc:	80 83       	st	Z, r24
 9be:	2f ef       	ldi	r18, 0xFF	; 255
 9c0:	83 ec       	ldi	r24, 0xC3	; 195
 9c2:	99 e0       	ldi	r25, 0x09	; 9
 9c4:	21 50       	subi	r18, 0x01	; 1
 9c6:	80 40       	sbci	r24, 0x00	; 0
 9c8:	90 40       	sbci	r25, 0x00	; 0
 9ca:	e1 f7       	brne	.-8      	; 0x9c4 <door_action_error+0xa6>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <door_action_error+0xb0>
 9ce:	00 00       	nop
 9d0:	80 81       	ld	r24, Z
	_delay_ms(200);
	PORTL |= 0B00000010;
 9d2:	82 60       	ori	r24, 0x02	; 2
 9d4:	80 83       	st	Z, r24
 9d6:	2f ef       	ldi	r18, 0xFF	; 255
 9d8:	85 ea       	ldi	r24, 0xA5	; 165
 9da:	9e e0       	ldi	r25, 0x0E	; 14
 9dc:	21 50       	subi	r18, 0x01	; 1
 9de:	80 40       	sbci	r24, 0x00	; 0
 9e0:	90 40       	sbci	r25, 0x00	; 0
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <door_action_error+0xbe>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <door_action_error+0xc8>
 9e6:	00 00       	nop
 9e8:	80 81       	ld	r24, Z
	_delay_ms(300);
	PORTL &= 0B00000001;
 9ea:	81 70       	andi	r24, 0x01	; 1
 9ec:	80 83       	st	Z, r24
 9ee:	08 95       	ret

000009f0 <action>:
 9f0:	cf 93       	push	r28
}
void action(void)
{
 9f2:	df 93       	push	r29
 9f4:	1f 92       	push	r1
 9f6:	1f 92       	push	r1
 9f8:	cd b7       	in	r28, 0x3d	; 61
 9fa:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned rxData2;
	rxData2 = receiveUSART();
 9fc:	40 de       	rcall	.-896    	; 0x67e <receiveUSART>
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	9a 83       	std	Y+2, r25	; 0x02
 a02:	89 83       	std	Y+1, r24	; 0x01
	
	if(rxData2 == 51)
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	9a 81       	ldd	r25, Y+2	; 0x02
 a08:	c3 97       	sbiw	r24, 0x33	; 51
 a0a:	39 f4       	brne	.+14     	; 0xa1a <action+0x2a>
	{
		Database_Status = 1;
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <__data_end+0x1>
 a14:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <__data_end>
 a18:	27 c0       	rjmp	.+78     	; 0xa68 <action+0x78>
	}
	else
	{
		if(rxData2 == 49)
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	9a 81       	ldd	r25, Y+2	; 0x02
 a1e:	c1 97       	sbiw	r24, 0x31	; 49
 a20:	59 f4       	brne	.+22     	; 0xa38 <action+0x48>
		{
			LCDClear();
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	bd db       	rcall	.-2182   	; 0x1a2 <LCDByte>
			LCDWriteStringXY(4,0,"UNLOCKED");
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	84 e0       	ldi	r24, 0x04	; 4
 a2c:	17 dc       	rcall	.-2002   	; 0x25c <LCDGotoXY>
 a2e:	8e eb       	ldi	r24, 0xBE	; 190
 a30:	92 e0       	ldi	r25, 0x02	; 2
			door_action();
 a32:	ee db       	rcall	.-2084   	; 0x210 <LCDWriteString>
 a34:	23 df       	rcall	.-442    	; 0x87c <door_action>
 a36:	18 c0       	rjmp	.+48     	; 0xa68 <action+0x78>
		}
		else
		{
			if (rxData2 == 50)
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	9a 81       	ldd	r25, Y+2	; 0x02
 a3c:	c2 97       	sbiw	r24, 0x32	; 50
			{
				LCDClear();
 a3e:	59 f4       	brne	.+22     	; 0xa56 <action+0x66>
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	81 e0       	ldi	r24, 0x01	; 1
				LCDWriteStringXY(3,0,"LOCKED");
 a44:	ae db       	rcall	.-2212   	; 0x1a2 <LCDByte>
 a46:	60 e0       	ldi	r22, 0x00	; 0
 a48:	83 e0       	ldi	r24, 0x03	; 3
 a4a:	08 dc       	rcall	.-2032   	; 0x25c <LCDGotoXY>
 a4c:	80 ec       	ldi	r24, 0xC0	; 192
 a4e:	92 e0       	ldi	r25, 0x02	; 2
				door_action_error();
 a50:	df db       	rcall	.-2114   	; 0x210 <LCDWriteString>
 a52:	65 df       	rcall	.-310    	; 0x91e <door_action_error>
 a54:	09 c0       	rjmp	.+18     	; 0xa68 <action+0x78>
			}
			else
			{
				LCDClear();
 a56:	60 e0       	ldi	r22, 0x00	; 0
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	a3 db       	rcall	.-2234   	; 0x1a2 <LCDByte>
 a5c:	81 e0       	ldi	r24, 0x01	; 1
				Database_Status = 1;
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <__data_end+0x1>
 a64:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <__data_end>
 a68:	0f 90       	pop	r0
			}
			
		}
	}
}
 a6a:	0f 90       	pop	r0
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <__vector_25>:
 a72:	1f 92       	push	r1
ISR (USART0_RX_vect)
{
 a74:	0f 92       	push	r0
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	0f 92       	push	r0
 a7a:	11 24       	eor	r1, r1
 a7c:	0b b6       	in	r0, 0x3b	; 59
 a7e:	0f 92       	push	r0
 a80:	2f 93       	push	r18
 a82:	3f 93       	push	r19
 a84:	4f 93       	push	r20
 a86:	5f 93       	push	r21
 a88:	6f 93       	push	r22
 a8a:	7f 93       	push	r23
 a8c:	8f 93       	push	r24
 a8e:	9f 93       	push	r25
 a90:	af 93       	push	r26
 a92:	bf 93       	push	r27
 a94:	ef 93       	push	r30
 a96:	ff 93       	push	r31
	action();
 a98:	ab df       	rcall	.-170    	; 0x9f0 <action>
 a9a:	ff 91       	pop	r31
 a9c:	ef 91       	pop	r30
 a9e:	bf 91       	pop	r27
 aa0:	af 91       	pop	r26
 aa2:	9f 91       	pop	r25
 aa4:	8f 91       	pop	r24
 aa6:	7f 91       	pop	r23
 aa8:	6f 91       	pop	r22
 aaa:	5f 91       	pop	r21
 aac:	4f 91       	pop	r20
 aae:	3f 91       	pop	r19
 ab0:	2f 91       	pop	r18
 ab2:	0f 90       	pop	r0
 ab4:	0b be       	out	0x3b, r0	; 59
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	0f 90       	pop	r0
 abc:	1f 90       	pop	r1
 abe:	18 95       	reti

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
