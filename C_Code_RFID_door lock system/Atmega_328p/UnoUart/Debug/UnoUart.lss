
UnoUart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086a  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bb  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  9e:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUSART>:

volatile int rxFlag=0;

void initUSART(void)
{
	UBRR0H = (unsigned char)(UBRR_VALUE>>8);
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)(UBRR_VALUE);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  b0:	88 e9       	ldi	r24, 0x98	; 152
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3<<UCSZ00);
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	sei();
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <transmitUSART>:
}


void transmitUSART(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <transmitUSART>
	UDR0 = data;
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <receiveUSART>:
}

unsigned char receiveUSART(void)
{
	while(!(UCSR0A & (1<<RXC0)));
  ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d2:	88 23       	and	r24, r24
  d4:	e4 f7       	brge	.-8      	; 0xce <receiveUSART>
	return UDR0;
  d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  da:	08 95       	ret

000000dc <main>:


int main(void)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	64 97       	sbiw	r28, 0x14	; 20
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	EICRA |= 0x03;
  f0:	e9 e6       	ldi	r30, 0x69	; 105
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	80 83       	st	Z, r24
	EIMSK |= 0x01;
  fa:	8d b3       	in	r24, 0x1d	; 29
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8d bb       	out	0x1d, r24	; 29
	sei();
 100:	78 94       	sei

	initUSART();
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <initUSART>
	unsigned char rxByte;
	uint8_t door_status = 0;
	unsigned char arrNew[1][4];
	unsigned char arr[rowCount][4] = {{0xCA,0x57,0x00,0x78},{0x01,0x02,0x03,0x04},{0x03,0x5C,0x34,0x3F},{0x87,0x05,0xAB,0xB4}};
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	de 01       	movw	r26, r28
 10e:	15 96       	adiw	r26, 0x05	; 5
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	3b e7       	ldi	r19, 0x7B	; 123
 11c:	82 e9       	ldi	r24, 0x92	; 146
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x42>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x4c>
 128:	00 00       	nop
	int i=0;
	int byte=0;
	int x=0;
	_delay_ms(3000);
	transmitUSART('3');
 12a:	83 e3       	ldi	r24, 0x33	; 51
 12c:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitUSART>
	unsigned char rxByte;
	uint8_t door_status = 0;
	unsigned char arrNew[1][4];
	unsigned char arr[rowCount][4] = {{0xCA,0x57,0x00,0x78},{0x01,0x02,0x03,0x04},{0x03,0x5C,0x34,0x3F},{0x87,0x05,0xAB,0xB4}};
	int i=0;
	int byte=0;
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
	_delay_ms(3000);
	transmitUSART('3');
	while (1)
	{
		
		if(rxFlag)
 138:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 13c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 140:	89 2b       	or	r24, r25
 142:	81 f0       	breq	.+32     	; 0x164 <main+0x88>
		{	
			rxFlag = 0;
 144:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 148:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			rxByte=receiveUSART();
 14c:	0e 94 67 00 	call	0xce	; 0xce <receiveUSART>
			arrNew[0][i]=rxByte;
 150:	e1 e0       	ldi	r30, 0x01	; 1
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	ee 0d       	add	r30, r14
 15a:	ff 1d       	adc	r31, r15
 15c:	80 83       	st	Z, r24
			i++;	
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	e9 1a       	sub	r14, r25
 162:	f9 0a       	sbc	r15, r25
		}
		
		if(i==4)
 164:	24 e0       	ldi	r18, 0x04	; 4
 166:	e2 16       	cp	r14, r18
 168:	f1 04       	cpc	r15, r1
 16a:	31 f7       	brne	.-52     	; 0x138 <main+0x5c>
 16c:	27 c0       	rjmp	.+78     	; 0x1bc <main+0xe0>
			door_status = 0;
			for(x=0;x<rowCount;x++)
			{
				for(byte=0;byte<4;byte++)
				{
					if(arr[x][byte] != arrNew[0][byte])
 16e:	fc 01       	movw	r30, r24
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	2c 0f       	add	r18, r28
 17e:	3d 1f       	adc	r19, r29
 180:	e2 0f       	add	r30, r18
 182:	f3 1f       	adc	r31, r19
 184:	e0 0f       	add	r30, r16
 186:	f1 1f       	adc	r31, r17
 188:	34 81       	ldd	r19, Z+4	; 0x04
 18a:	e1 e0       	ldi	r30, 0x01	; 1
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29
 192:	e0 0f       	add	r30, r16
 194:	f1 1f       	adc	r31, r17
 196:	20 81       	ld	r18, Z
 198:	32 13       	cpse	r19, r18
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <main+0xd2>
		if(i==4)
		{
			door_status = 0;
			for(x=0;x<rowCount;x++)
			{
				for(byte=0;byte<4;byte++)
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0xca>
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	04 30       	cpi	r16, 0x04	; 4
 1a8:	11 05       	cpc	r17, r1
 1aa:	0c f3       	brlt	.-62     	; 0x16e <main+0x92>
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <main+0xd6>
				{
					if(arr[x][byte] != arrNew[0][byte])
					{
						byte=0;
 1ae:	00 e0       	ldi	r16, 0x00	; 0
 1b0:	10 e0       	ldi	r17, 0x00	; 0
						break;
					}				
				}
				if(byte == 4)
 1b2:	04 30       	cpi	r16, 0x04	; 4
 1b4:	11 05       	cpc	r17, r1
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <main+0xea>
		}
		
		if(i==4)
		{
			door_status = 0;
			for(x=0;x<rowCount;x++)
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <main+0xe4>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	91 05       	cpc	r25, r1
 1c4:	74 f3       	brlt	.-36     	; 0x1a2 <main+0xc6>
					}				
				}
				if(byte == 4)
				break;
			}
			if(byte == 4)
 1c6:	04 30       	cpi	r16, 0x04	; 4
 1c8:	11 05       	cpc	r17, r1
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <main+0xf4>
			i++;	
		}
		
		if(i==4)
		{
			door_status = 0;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <main+0xf6>
				}
				if(byte == 4)
				break;
			}
			if(byte == 4)
			door_status = UNLOCKED;
 1d0:	83 e0       	ldi	r24, 0x03	; 3
			switch(door_status)
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	21 f4       	brne	.+8      	; 0x1de <main+0x102>
			{
				case UNLOCKED :
				{
					rxByte = '1';
					transmitUSART(rxByte);
 1d6:	81 e3       	ldi	r24, 0x31	; 49
 1d8:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitUSART>
					break;
 1dc:	ab cf       	rjmp	.-170    	; 0x134 <main+0x58>
				}
				default:
				{
					rxByte = '2';
					transmitUSART(rxByte);
 1de:	82 e3       	ldi	r24, 0x32	; 50
 1e0:	0e 94 60 00 	call	0xc0	; 0xc0 <transmitUSART>
					break;
 1e4:	a7 cf       	rjmp	.-178    	; 0x134 <main+0x58>

000001e6 <__vector_18>:
	return 0;
}


ISR (USART_RX_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	rxFlag =1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
